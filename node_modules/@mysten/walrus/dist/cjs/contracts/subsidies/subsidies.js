"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var subsidies_exports = {};
__export(subsidies_exports, {
  AdminCap: () => AdminCap,
  CombinedPayment: () => CombinedPayment,
  Subsidies: () => Subsidies,
  V3: () => V3,
  _new: () => _new,
  addFunds: () => addFunds,
  adminCapSubsidiesId: () => adminCapSubsidiesId,
  buyerSubsidyRate: () => buyerSubsidyRate,
  extendBlob: () => extendBlob,
  newWithInitialRatesAndFunds: () => newWithInitialRatesAndFunds,
  registerBlob: () => registerBlob,
  reserveSpace: () => reserveSpace,
  setBuyerSubsidyRate: () => setBuyerSubsidyRate,
  setSystemSubsidyRate: () => setSystemSubsidyRate,
  subsidyPoolValue: () => subsidyPoolValue,
  systemSubsidyRate: () => systemSubsidyRate,
  withdrawBalance: () => withdrawBalance
});
module.exports = __toCommonJS(subsidies_exports);
var import_bcs = require("@mysten/sui/bcs");
var import_utils = require("../utils/index.js");
var object = __toESM(require("./deps/sui/object.js"));
var balance = __toESM(require("./deps/sui/balance.js"));
var coin = __toESM(require("./deps/sui/coin.js"));
function V3() {
  return import_bcs.bcs.tuple([import_bcs.bcs.bool()], { name: "V3" });
}
function AdminCap() {
  return import_bcs.bcs.struct("AdminCap", {
    id: object.UID(),
    subsidies_id: import_bcs.bcs.Address
  });
}
function Subsidies() {
  return import_bcs.bcs.struct("Subsidies", {
    id: object.UID(),
    /**
     * The subsidy rate applied to the buyer at the moment of storage purchase in basis
     * points.
     */
    buyer_subsidy_rate: import_bcs.bcs.u16(),
    /**
     * The subsidy rate applied to the storage node when buying storage in basis
     * points.
     */
    system_subsidy_rate: import_bcs.bcs.u16(),
    /** The balance of funds available in the subsidy pool. */
    subsidy_pool: balance.Balance(),
    /** Package ID of the subsidies contract. */
    package_id: import_bcs.bcs.Address,
    /** The version of the subsidies contract. */
    version: import_bcs.bcs.u64()
  });
}
function CombinedPayment() {
  return import_bcs.bcs.struct("CombinedPayment", {
    payment: coin.Coin(),
    initial_payment_value: import_bcs.bcs.u64(),
    initial_pool_value: import_bcs.bcs.u64()
  });
}
function _new(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
  ];
  const parameterNames = ["packageId"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "new",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function newWithInitialRatesAndFunds(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
    "u16",
    "u16",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = [
    "packageId",
    "initialBuyerSubsidyRate",
    "initialSystemSubsidyRate",
    "initialFunds"
  ];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "new_with_initial_rates_and_funds",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function addFunds(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    `${packageAddress}::subsidies::Subsidies`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "funds"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "add_funds",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function setBuyerSubsidyRate(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    `${packageAddress}::subsidies::Subsidies`,
    `${packageAddress}::subsidies::AdminCap`,
    "u16"
  ];
  const parameterNames = ["self", "cap", "newRate"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "set_buyer_subsidy_rate",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function withdrawBalance(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    `${packageAddress}::subsidies::Subsidies`,
    `${packageAddress}::subsidies::AdminCap`
  ];
  const parameterNames = ["self", "cap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "withdraw_balance",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function setSystemSubsidyRate(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    `${packageAddress}::subsidies::Subsidies`,
    `${packageAddress}::subsidies::AdminCap`,
    "u16"
  ];
  const parameterNames = ["self", "cap", "newRate"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "set_system_subsidy_rate",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function extendBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    `${packageAddress}::subsidies::Subsidies`,
    `${packageAddress}::system::System`,
    `${packageAddress}::blob::Blob`,
    "u32",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "system", "blob", "epochsAhead", "payment"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "extend_blob",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function reserveSpace(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    `${packageAddress}::subsidies::Subsidies`,
    `${packageAddress}::system::System`,
    "u64",
    "u32",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "system", "storageAmount", "epochsAhead", "payment"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "reserve_space",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function registerBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    `${packageAddress}::subsidies::Subsidies`,
    `${packageAddress}::system::System`,
    `${packageAddress}::storage_resource::Storage`,
    "u256",
    "u256",
    "u64",
    "u8",
    "bool",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = [
    "self",
    "system",
    "storage",
    "blobId",
    "rootHash",
    "size",
    "encodingType",
    "deletable",
    "writePayment"
  ];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "register_blob",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function adminCapSubsidiesId(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [`${packageAddress}::subsidies::AdminCap`];
  const parameterNames = ["adminCap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "admin_cap_subsidies_id",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function subsidyPoolValue(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [`${packageAddress}::subsidies::Subsidies`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "subsidy_pool_value",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function buyerSubsidyRate(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [`${packageAddress}::subsidies::Subsidies`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "buyer_subsidy_rate",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function systemSubsidyRate(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [`${packageAddress}::subsidies::Subsidies`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "system_subsidy_rate",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=subsidies.js.map
