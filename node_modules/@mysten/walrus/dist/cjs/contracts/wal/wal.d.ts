import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from '../utils/index.js';
export declare function WAL(): import("@mysten/sui/bcs").BcsType<{
    dummy_field: boolean;
}, {
    dummy_field: boolean;
}>;
export declare function ProtectedTreasury(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
}>;
export declare function TreasuryCapKey(): import("@mysten/sui/bcs").BcsType<{
    dummy_field: boolean;
}, {
    dummy_field: boolean;
}>;
export interface TotalSupplyArguments {
    treasury: RawTransactionArgument<string>;
}
export interface TotalSupplyOptions {
    package?: string;
    arguments: TotalSupplyArguments | [treasury: RawTransactionArgument<string>];
}
/** Get the total supply of the WAL token. */
export declare function totalSupply(options: TotalSupplyOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface BurnArguments {
    treasury: RawTransactionArgument<string>;
    coin: RawTransactionArgument<string>;
}
export interface BurnOptions {
    package?: string;
    arguments: BurnArguments | [treasury: RawTransactionArgument<string>, coin: RawTransactionArgument<string>];
}
/** Burns a `Coin<WAL>` from the sender. */
export declare function burn(options: BurnOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
