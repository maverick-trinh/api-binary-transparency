import type { BcsType } from '@mysten/sui/bcs';
import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from '../utils/index.js';
export declare function ExtendedField(): BcsType<{
    id: {
        id: string;
    };
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
}>;
export declare function Key(): BcsType<[boolean], readonly [boolean]>;
export interface NewArguments<T extends BcsType<any>> {
    value: RawTransactionArgument<T>;
}
export interface NewOptions<T extends BcsType<any>> {
    package?: string;
    arguments: NewArguments<T> | [value: RawTransactionArgument<T>];
    typeArguments: [string];
}
/** Creates a new extended field with the given value. */
export declare function _new<T extends BcsType<any>>(options: NewOptions<T>): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface BorrowArguments {
    field: RawTransactionArgument<string>;
}
export interface BorrowOptions {
    package?: string;
    arguments: BorrowArguments | [field: RawTransactionArgument<string>];
    typeArguments: [string];
}
/** Borrows the value stored in the extended field. */
export declare function borrow(options: BorrowOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface BorrowMutArguments {
    field: RawTransactionArgument<string>;
}
export interface BorrowMutOptions {
    package?: string;
    arguments: BorrowMutArguments | [field: RawTransactionArgument<string>];
    typeArguments: [string];
}
/** Borrows the value stored in the extended field mutably. */
export declare function borrowMut(options: BorrowMutOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface SwapArguments<T extends BcsType<any>> {
    field: RawTransactionArgument<string>;
    value: RawTransactionArgument<T>;
}
export interface SwapOptions<T extends BcsType<any>> {
    package?: string;
    arguments: SwapArguments<T> | [field: RawTransactionArgument<string>, value: RawTransactionArgument<T>];
    typeArguments: [string];
}
/** Swaps the value stored in the extended field with the given value. */
export declare function swap<T extends BcsType<any>>(options: SwapOptions<T>): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface DestroyArguments {
    field: RawTransactionArgument<string>;
}
export interface DestroyOptions {
    package?: string;
    arguments: DestroyArguments | [field: RawTransactionArgument<string>];
    typeArguments: [string];
}
/** Destroys the extended field and returns the value stored in it. */
export declare function destroy(options: DestroyOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
