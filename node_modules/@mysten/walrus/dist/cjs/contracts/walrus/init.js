"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var init_exports = {};
__export(init_exports, {
  INIT: () => INIT,
  InitCap: () => InitCap,
  initializeWalrus: () => initializeWalrus,
  migrate: () => migrate
});
module.exports = __toCommonJS(init_exports);
var import_bcs = require("@mysten/sui/bcs");
var import_utils = require("../utils/index.js");
var object = __toESM(require("./deps/sui/object.js"));
var _package = __toESM(require("./deps/sui/package.js"));
function INIT() {
  return import_bcs.bcs.struct("INIT", {
    dummy_field: import_bcs.bcs.bool()
  });
}
function InitCap() {
  return import_bcs.bcs.struct("InitCap", {
    id: object.UID(),
    publisher: _package.Publisher()
  });
}
function initializeWalrus(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::init::InitCap`,
    "0x0000000000000000000000000000000000000000000000000000000000000002::package::UpgradeCap",
    "u64",
    "u64",
    "u16",
    "u32",
    "0x0000000000000000000000000000000000000000000000000000000000000002::clock::Clock"
  ];
  const parameterNames = [
    "initCap",
    "upgradeCap",
    "epochZeroDuration",
    "epochDuration",
    "nShards",
    "maxEpochsAhead",
    "clock"
  ];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "init",
    function: "initialize_walrus",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
function migrate(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus";
  const argumentsTypes = [
    `${packageAddress}::staking::Staking`,
    `${packageAddress}::system::System`
  ];
  const parameterNames = ["staking", "system"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "init",
    function: "migrate",
    arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes, parameterNames)
  });
}
//# sourceMappingURL=init.js.map
