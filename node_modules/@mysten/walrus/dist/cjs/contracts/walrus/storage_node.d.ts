import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from '../utils/index.js';
export declare function StorageNodeInfo(): import("@mysten/sui/bcs").BcsType<{
    name: string;
    node_id: string;
    network_address: string;
    public_key: {
        bytes: number[];
    };
    next_epoch_public_key: {
        bytes: number[];
    } | null;
    network_public_key: number[];
    metadata: {
        id: {
            id: string;
        };
    };
}, {
    name: string;
    node_id: string | Uint8Array<ArrayBufferLike>;
    network_address: string;
    public_key: {
        bytes: Iterable<number> & {
            length: number;
        };
    };
    next_epoch_public_key: {
        bytes: Iterable<number> & {
            length: number;
        };
    } | null | undefined;
    network_public_key: Iterable<number> & {
        length: number;
    };
    metadata: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
    };
}>;
export declare function StorageNodeCap(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    node_id: string;
    last_epoch_sync_done: number;
    last_event_blob_attestation: {
        checkpoint_sequence_num: string;
        epoch: number;
    } | null;
    deny_list_root: string;
    deny_list_sequence: string;
    deny_list_size: string;
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    node_id: string | Uint8Array<ArrayBufferLike>;
    last_epoch_sync_done: number;
    last_event_blob_attestation: {
        checkpoint_sequence_num: string | number | bigint;
        epoch: number;
    } | null | undefined;
    deny_list_root: string | number | bigint;
    deny_list_sequence: string | number | bigint;
    deny_list_size: string | number | bigint;
}>;
export interface IdArguments {
    cap: RawTransactionArgument<string>;
}
export interface IdOptions {
    package?: string;
    arguments: IdArguments | [cap: RawTransactionArgument<string>];
}
/** Return the node ID of the storage node. */
export declare function id(options: IdOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface NodeIdArguments {
    cap: RawTransactionArgument<string>;
}
export interface NodeIdOptions {
    package?: string;
    arguments: NodeIdArguments | [cap: RawTransactionArgument<string>];
}
/** Return the pool ID of the storage node. */
export declare function nodeId(options: NodeIdOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface LastEpochSyncDoneArguments {
    cap: RawTransactionArgument<string>;
}
export interface LastEpochSyncDoneOptions {
    package?: string;
    arguments: LastEpochSyncDoneArguments | [cap: RawTransactionArgument<string>];
}
/**
 * Return the last epoch in which the storage node attested that it has finished
 * syncing.
 */
export declare function lastEpochSyncDone(options: LastEpochSyncDoneOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface LastEventBlobAttestationArguments {
    cap: RawTransactionArgument<string>;
}
export interface LastEventBlobAttestationOptions {
    package?: string;
    arguments: LastEventBlobAttestationArguments | [cap: RawTransactionArgument<string>];
}
/** Return the latest event blob attestation. */
export declare function lastEventBlobAttestation(options: LastEventBlobAttestationOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface DenyListRootArguments {
    cap: RawTransactionArgument<string>;
}
export interface DenyListRootOptions {
    package?: string;
    arguments: DenyListRootArguments | [cap: RawTransactionArgument<string>];
}
/** Return the deny list root of the storage node. */
export declare function denyListRoot(options: DenyListRootOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface DenyListSequenceArguments {
    cap: RawTransactionArgument<string>;
}
export interface DenyListSequenceOptions {
    package?: string;
    arguments: DenyListSequenceArguments | [cap: RawTransactionArgument<string>];
}
/** Return the deny list sequence number of the storage node. */
export declare function denyListSequence(options: DenyListSequenceOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
