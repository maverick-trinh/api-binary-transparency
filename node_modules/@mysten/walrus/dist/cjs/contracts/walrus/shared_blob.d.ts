import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from '../utils/index.js';
export declare function SharedBlob(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    blob: {
        id: {
            id: string;
        };
        registered_epoch: number;
        blob_id: string;
        size: string;
        encoding_type: number;
        certified_epoch: number | null;
        storage: {
            id: {
                id: string;
            };
            start_epoch: number;
            end_epoch: number;
            storage_size: string;
        };
        deletable: boolean;
    };
    funds: {
        value: string;
    };
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    blob: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
        registered_epoch: number;
        blob_id: string | number | bigint;
        size: string | number | bigint;
        encoding_type: number;
        certified_epoch: number | null | undefined;
        storage: {
            id: {
                id: string | Uint8Array<ArrayBufferLike>;
            };
            start_epoch: number;
            end_epoch: number;
            storage_size: string | number | bigint;
        };
        deletable: boolean;
    };
    funds: {
        value: string | number | bigint;
    };
}>;
export interface NewArguments {
    blob: RawTransactionArgument<string>;
}
export interface NewOptions {
    package?: string;
    arguments: NewArguments | [blob: RawTransactionArgument<string>];
}
/** Shares the provided `blob` as a `SharedBlob` with zero funds. */
export declare function _new(options: NewOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface NewFundedArguments {
    blob: RawTransactionArgument<string>;
    funds: RawTransactionArgument<string>;
}
export interface NewFundedOptions {
    package?: string;
    arguments: NewFundedArguments | [blob: RawTransactionArgument<string>, funds: RawTransactionArgument<string>];
}
/** Shares the provided `blob` as a `SharedBlob` with funds. */
export declare function newFunded(options: NewFundedOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface FundArguments {
    self: RawTransactionArgument<string>;
    addedFunds: RawTransactionArgument<string>;
}
export interface FundOptions {
    package?: string;
    arguments: FundArguments | [self: RawTransactionArgument<string>, addedFunds: RawTransactionArgument<string>];
}
/** Adds the provided `Coin` to the stored funds. */
export declare function fund(options: FundOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface ExtendArguments {
    self: RawTransactionArgument<string>;
    system: RawTransactionArgument<string>;
    extendedEpochs: RawTransactionArgument<number>;
}
export interface ExtendOptions {
    package?: string;
    arguments: ExtendArguments | [
        self: RawTransactionArgument<string>,
        system: RawTransactionArgument<string>,
        extendedEpochs: RawTransactionArgument<number>
    ];
}
/**
 * Extends the lifetime of the wrapped `Blob` by `extended_epochs` epochs if the
 * stored funds are sufficient and the new lifetime does not exceed the maximum
 * lifetime.
 */
export declare function extend(options: ExtendOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface BlobArguments {
    self: RawTransactionArgument<string>;
}
export interface BlobOptions {
    package?: string;
    arguments: BlobArguments | [self: RawTransactionArgument<string>];
}
/** Returns a reference to the wrapped `Blob`. */
export declare function blob(options: BlobOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface FundsArguments {
    self: RawTransactionArgument<string>;
}
export interface FundsOptions {
    package?: string;
    arguments: FundsArguments | [self: RawTransactionArgument<string>];
}
/** Returns the balance of funds stored in the `SharedBlob`. */
export declare function funds(options: FundsOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
