"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var events_exports = {};
__export(events_exports, {
  BlobCertified: () => BlobCertified,
  BlobDeleted: () => BlobDeleted,
  BlobRegistered: () => BlobRegistered,
  ContractUpgradeProposed: () => ContractUpgradeProposed,
  ContractUpgradeQuorumReached: () => ContractUpgradeQuorumReached,
  ContractUpgraded: () => ContractUpgraded,
  DenyListBlobDeleted: () => DenyListBlobDeleted,
  DenyListUpdate: () => DenyListUpdate,
  EpochChangeDone: () => EpochChangeDone,
  EpochChangeStart: () => EpochChangeStart,
  EpochParametersSelected: () => EpochParametersSelected,
  InvalidBlobID: () => InvalidBlobID,
  RegisterDenyListUpdate: () => RegisterDenyListUpdate,
  ShardRecoveryStart: () => ShardRecoveryStart,
  ShardsReceived: () => ShardsReceived
});
module.exports = __toCommonJS(events_exports);
var import_bcs = require("@mysten/sui/bcs");
function BlobRegistered() {
  return import_bcs.bcs.struct("BlobRegistered", {
    epoch: import_bcs.bcs.u32(),
    blob_id: import_bcs.bcs.u256(),
    size: import_bcs.bcs.u64(),
    encoding_type: import_bcs.bcs.u8(),
    end_epoch: import_bcs.bcs.u32(),
    deletable: import_bcs.bcs.bool(),
    object_id: import_bcs.bcs.Address
  });
}
function BlobCertified() {
  return import_bcs.bcs.struct("BlobCertified", {
    epoch: import_bcs.bcs.u32(),
    blob_id: import_bcs.bcs.u256(),
    end_epoch: import_bcs.bcs.u32(),
    deletable: import_bcs.bcs.bool(),
    object_id: import_bcs.bcs.Address,
    is_extension: import_bcs.bcs.bool()
  });
}
function BlobDeleted() {
  return import_bcs.bcs.struct("BlobDeleted", {
    epoch: import_bcs.bcs.u32(),
    blob_id: import_bcs.bcs.u256(),
    end_epoch: import_bcs.bcs.u32(),
    object_id: import_bcs.bcs.Address,
    was_certified: import_bcs.bcs.bool()
  });
}
function InvalidBlobID() {
  return import_bcs.bcs.struct("InvalidBlobID", {
    epoch: import_bcs.bcs.u32(),
    blob_id: import_bcs.bcs.u256()
  });
}
function EpochChangeStart() {
  return import_bcs.bcs.struct("EpochChangeStart", {
    epoch: import_bcs.bcs.u32()
  });
}
function EpochChangeDone() {
  return import_bcs.bcs.struct("EpochChangeDone", {
    epoch: import_bcs.bcs.u32()
  });
}
function ShardsReceived() {
  return import_bcs.bcs.struct("ShardsReceived", {
    epoch: import_bcs.bcs.u32(),
    shards: import_bcs.bcs.vector(import_bcs.bcs.u16())
  });
}
function EpochParametersSelected() {
  return import_bcs.bcs.struct("EpochParametersSelected", {
    next_epoch: import_bcs.bcs.u32()
  });
}
function ShardRecoveryStart() {
  return import_bcs.bcs.struct("ShardRecoveryStart", {
    epoch: import_bcs.bcs.u32(),
    shards: import_bcs.bcs.vector(import_bcs.bcs.u16())
  });
}
function ContractUpgraded() {
  return import_bcs.bcs.struct("ContractUpgraded", {
    epoch: import_bcs.bcs.u32(),
    package_id: import_bcs.bcs.Address,
    version: import_bcs.bcs.u64()
  });
}
function RegisterDenyListUpdate() {
  return import_bcs.bcs.struct("RegisterDenyListUpdate", {
    epoch: import_bcs.bcs.u32(),
    root: import_bcs.bcs.u256(),
    sequence_number: import_bcs.bcs.u64(),
    node_id: import_bcs.bcs.Address
  });
}
function DenyListUpdate() {
  return import_bcs.bcs.struct("DenyListUpdate", {
    epoch: import_bcs.bcs.u32(),
    root: import_bcs.bcs.u256(),
    sequence_number: import_bcs.bcs.u64(),
    node_id: import_bcs.bcs.Address
  });
}
function DenyListBlobDeleted() {
  return import_bcs.bcs.struct("DenyListBlobDeleted", {
    epoch: import_bcs.bcs.u32(),
    blob_id: import_bcs.bcs.u256()
  });
}
function ContractUpgradeProposed() {
  return import_bcs.bcs.struct("ContractUpgradeProposed", {
    epoch: import_bcs.bcs.u32(),
    package_digest: import_bcs.bcs.vector(import_bcs.bcs.u8())
  });
}
function ContractUpgradeQuorumReached() {
  return import_bcs.bcs.struct("ContractUpgradeQuorumReached", {
    epoch: import_bcs.bcs.u32(),
    package_digest: import_bcs.bcs.vector(import_bcs.bcs.u8())
  });
}
//# sourceMappingURL=events.js.map
