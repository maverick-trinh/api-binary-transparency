import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from '../utils/index.js';
export declare function Blob(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    registered_epoch: number;
    blob_id: string;
    size: string;
    encoding_type: number;
    certified_epoch: number | null;
    storage: {
        id: {
            id: string;
        };
        start_epoch: number;
        end_epoch: number;
        storage_size: string;
    };
    deletable: boolean;
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    registered_epoch: number;
    blob_id: string | number | bigint;
    size: string | number | bigint;
    encoding_type: number;
    certified_epoch: number | null | undefined;
    storage: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
        start_epoch: number;
        end_epoch: number;
        storage_size: string | number | bigint;
    };
    deletable: boolean;
}>;
export declare function BlobIdDerivation(): import("@mysten/sui/bcs").BcsType<{
    encoding_type: number;
    size: string;
    root_hash: string;
}, {
    encoding_type: number;
    size: string | number | bigint;
    root_hash: string | number | bigint;
}>;
export interface ObjectIdArguments {
    self: RawTransactionArgument<string>;
}
export interface ObjectIdOptions {
    package?: string;
    arguments: ObjectIdArguments | [self: RawTransactionArgument<string>];
}
export declare function objectId(options: ObjectIdOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface RegisteredEpochArguments {
    self: RawTransactionArgument<string>;
}
export interface RegisteredEpochOptions {
    package?: string;
    arguments: RegisteredEpochArguments | [self: RawTransactionArgument<string>];
}
export declare function registeredEpoch(options: RegisteredEpochOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface BlobIdArguments {
    self: RawTransactionArgument<string>;
}
export interface BlobIdOptions {
    package?: string;
    arguments: BlobIdArguments | [self: RawTransactionArgument<string>];
}
export declare function blobId(options: BlobIdOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface SizeArguments {
    self: RawTransactionArgument<string>;
}
export interface SizeOptions {
    package?: string;
    arguments: SizeArguments | [self: RawTransactionArgument<string>];
}
export declare function size(options: SizeOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface EncodingTypeArguments {
    self: RawTransactionArgument<string>;
}
export interface EncodingTypeOptions {
    package?: string;
    arguments: EncodingTypeArguments | [self: RawTransactionArgument<string>];
}
export declare function encodingType(options: EncodingTypeOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface CertifiedEpochArguments {
    self: RawTransactionArgument<string>;
}
export interface CertifiedEpochOptions {
    package?: string;
    arguments: CertifiedEpochArguments | [self: RawTransactionArgument<string>];
}
export declare function certifiedEpoch(options: CertifiedEpochOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface StorageArguments {
    self: RawTransactionArgument<string>;
}
export interface StorageOptions {
    package?: string;
    arguments: StorageArguments | [self: RawTransactionArgument<string>];
}
export declare function storage(options: StorageOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface IsDeletableArguments {
    self: RawTransactionArgument<string>;
}
export interface IsDeletableOptions {
    package?: string;
    arguments: IsDeletableArguments | [self: RawTransactionArgument<string>];
}
export declare function isDeletable(options: IsDeletableOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface EncodedSizeArguments {
    self: RawTransactionArgument<string>;
    nShards: RawTransactionArgument<number>;
}
export interface EncodedSizeOptions {
    package?: string;
    arguments: EncodedSizeArguments | [self: RawTransactionArgument<string>, nShards: RawTransactionArgument<number>];
}
export declare function encodedSize(options: EncodedSizeOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface EndEpochArguments {
    self: RawTransactionArgument<string>;
}
export interface EndEpochOptions {
    package?: string;
    arguments: EndEpochArguments | [self: RawTransactionArgument<string>];
}
export declare function endEpoch(options: EndEpochOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface DeriveBlobIdArguments {
    rootHash: RawTransactionArgument<number | bigint>;
    encodingType: RawTransactionArgument<number>;
    size: RawTransactionArgument<number | bigint>;
}
export interface DeriveBlobIdOptions {
    package?: string;
    arguments: DeriveBlobIdArguments | [
        rootHash: RawTransactionArgument<number | bigint>,
        encodingType: RawTransactionArgument<number>,
        size: RawTransactionArgument<number | bigint>
    ];
}
/** Derives the blob_id for a blob given the root_hash, encoding_type and size. */
export declare function deriveBlobId(options: DeriveBlobIdOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface BurnArguments {
    self: RawTransactionArgument<string>;
}
export interface BurnOptions {
    package?: string;
    arguments: BurnArguments | [self: RawTransactionArgument<string>];
}
/**
 * Allow the owner of a blob object to destroy it.
 *
 * This function also burns any [`Metadata`] associated with the blob, if present.
 */
export declare function burn(options: BurnOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface AddMetadataArguments {
    self: RawTransactionArgument<string>;
    metadata: RawTransactionArgument<string>;
}
export interface AddMetadataOptions {
    package?: string;
    arguments: AddMetadataArguments | [self: RawTransactionArgument<string>, metadata: RawTransactionArgument<string>];
}
/**
 * Adds the metadata dynamic field to the Blob.
 *
 * Aborts if the metadata is already present.
 */
export declare function addMetadata(options: AddMetadataOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface AddOrReplaceMetadataArguments {
    self: RawTransactionArgument<string>;
    metadata: RawTransactionArgument<string>;
}
export interface AddOrReplaceMetadataOptions {
    package?: string;
    arguments: AddOrReplaceMetadataArguments | [self: RawTransactionArgument<string>, metadata: RawTransactionArgument<string>];
}
/**
 * Adds the metadata dynamic field to the Blob, replacing the existing metadata if
 * present.
 *
 * Returns the replaced metadata if present.
 */
export declare function addOrReplaceMetadata(options: AddOrReplaceMetadataOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface TakeMetadataArguments {
    self: RawTransactionArgument<string>;
}
export interface TakeMetadataOptions {
    package?: string;
    arguments: TakeMetadataArguments | [self: RawTransactionArgument<string>];
}
/**
 * Removes the metadata dynamic field from the Blob, returning the contained
 * `Metadata`.
 *
 * Aborts if the metadata does not exist.
 */
export declare function takeMetadata(options: TakeMetadataOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface InsertOrUpdateMetadataPairArguments {
    self: RawTransactionArgument<string>;
    key: RawTransactionArgument<string>;
    value: RawTransactionArgument<string>;
}
export interface InsertOrUpdateMetadataPairOptions {
    package?: string;
    arguments: InsertOrUpdateMetadataPairArguments | [
        self: RawTransactionArgument<string>,
        key: RawTransactionArgument<string>,
        value: RawTransactionArgument<string>
    ];
}
/**
 * Inserts a key-value pair into the metadata.
 *
 * If the key is already present, the value is updated. Creates new metadata on the
 * Blob object if it does not exist already.
 */
export declare function insertOrUpdateMetadataPair(options: InsertOrUpdateMetadataPairOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface RemoveMetadataPairArguments {
    self: RawTransactionArgument<string>;
    key: RawTransactionArgument<string>;
}
export interface RemoveMetadataPairOptions {
    package?: string;
    arguments: RemoveMetadataPairArguments | [self: RawTransactionArgument<string>, key: RawTransactionArgument<string>];
}
/**
 * Removes the metadata associated with the given key.
 *
 * Aborts if the metadata does not exist.
 */
export declare function removeMetadataPair(options: RemoveMetadataPairOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface RemoveMetadataPairIfExistsArguments {
    self: RawTransactionArgument<string>;
    key: RawTransactionArgument<string>;
}
export interface RemoveMetadataPairIfExistsOptions {
    package?: string;
    arguments: RemoveMetadataPairIfExistsArguments | [self: RawTransactionArgument<string>, key: RawTransactionArgument<string>];
}
/** Removes and returns the metadata associated with the given key, if it exists. */
export declare function removeMetadataPairIfExists(options: RemoveMetadataPairIfExistsOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
