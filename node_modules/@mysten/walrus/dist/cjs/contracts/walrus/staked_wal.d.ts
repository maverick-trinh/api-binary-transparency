import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from '../utils/index.js';
export declare function StakedWal(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    state: import("@mysten/bcs").EnumOutputShapeWithKeys<{
        Staked: true;
        Withdrawing: {
            withdraw_epoch: number;
        };
    }, "Withdrawing" | "Staked">;
    node_id: string;
    principal: {
        value: string;
    };
    activation_epoch: number;
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    state: import("@mysten/bcs").EnumInputShape<{
        Staked: boolean | object | null;
        Withdrawing: {
            withdraw_epoch: number;
        };
    }>;
    node_id: string | Uint8Array<ArrayBufferLike>;
    principal: {
        value: string | number | bigint;
    };
    activation_epoch: number;
}>;
/**
 * The state of the staked WAL. It can be either `Staked` or `Withdrawing`. The
 * `Withdrawing` state contains the epoch when the staked WAL can be withdrawn.
 */
export declare function StakedWalState(): import("@mysten/sui/bcs").BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
    Staked: true;
    Withdrawing: {
        withdraw_epoch: number;
    };
}, "Withdrawing" | "Staked">, import("@mysten/bcs").EnumInputShape<{
    Staked: boolean | object | null;
    Withdrawing: {
        withdraw_epoch: number;
    };
}>>;
export interface NodeIdArguments {
    sw: RawTransactionArgument<string>;
}
export interface NodeIdOptions {
    package?: string;
    arguments: NodeIdArguments | [sw: RawTransactionArgument<string>];
}
/** Returns the `node_id` of the staked WAL. */
export declare function nodeId(options: NodeIdOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface ValueArguments {
    sw: RawTransactionArgument<string>;
}
export interface ValueOptions {
    package?: string;
    arguments: ValueArguments | [sw: RawTransactionArgument<string>];
}
/**
 * Returns the `principal` of the staked WAL. Called `value` to be consistent with
 * `Coin`.
 */
export declare function value(options: ValueOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface ActivationEpochArguments {
    sw: RawTransactionArgument<string>;
}
export interface ActivationEpochOptions {
    package?: string;
    arguments: ActivationEpochArguments | [sw: RawTransactionArgument<string>];
}
/** Returns the `activation_epoch` of the staked WAL. */
export declare function activationEpoch(options: ActivationEpochOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface IsStakedArguments {
    sw: RawTransactionArgument<string>;
}
export interface IsStakedOptions {
    package?: string;
    arguments: IsStakedArguments | [sw: RawTransactionArgument<string>];
}
/** Returns true if the staked WAL is in the `Staked` state. */
export declare function isStaked(options: IsStakedOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface IsWithdrawingArguments {
    sw: RawTransactionArgument<string>;
}
export interface IsWithdrawingOptions {
    package?: string;
    arguments: IsWithdrawingArguments | [sw: RawTransactionArgument<string>];
}
/** Checks whether the staked WAL is in the `Withdrawing` state. */
export declare function isWithdrawing(options: IsWithdrawingOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface WithdrawEpochArguments {
    sw: RawTransactionArgument<string>;
}
export interface WithdrawEpochOptions {
    package?: string;
    arguments: WithdrawEpochArguments | [sw: RawTransactionArgument<string>];
}
/**
 * Returns the `withdraw_epoch` of the staked WAL if it is in the `Withdrawing`.
 * Aborts otherwise.
 */
export declare function withdrawEpoch(options: WithdrawEpochOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface JoinArguments {
    sw: RawTransactionArgument<string>;
    other: RawTransactionArgument<string>;
}
export interface JoinOptions {
    package?: string;
    arguments: JoinArguments | [sw: RawTransactionArgument<string>, other: RawTransactionArgument<string>];
}
/**
 * Joins the staked WAL with another staked WAL, adding the `principal` of the
 * `other` staked WAL to the current staked WAL.
 *
 * Aborts if the `node_id` or `activation_epoch` of the staked WALs do not match.
 */
export declare function join(options: JoinOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface SplitArguments {
    sw: RawTransactionArgument<string>;
    amount: RawTransactionArgument<number | bigint>;
}
export interface SplitOptions {
    package?: string;
    arguments: SplitArguments | [sw: RawTransactionArgument<string>, amount: RawTransactionArgument<number | bigint>];
}
/**
 * Splits the staked WAL into two parts, one with the `amount` and the other with
 * the remaining `principal`. The `node_id`, `activation_epoch` are the same for
 * both the staked WALs.
 *
 * Aborts if the `amount` is greater than the `principal` of the staked WAL. Aborts
 * if the `amount` is zero.
 */
export declare function split(options: SplitOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
