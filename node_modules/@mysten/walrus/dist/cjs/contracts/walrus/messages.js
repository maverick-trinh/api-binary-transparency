"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var messages_exports = {};
__export(messages_exports, {
  BlobPersistenceType: () => BlobPersistenceType,
  CertifiedBlobMessage: () => CertifiedBlobMessage,
  CertifiedInvalidBlobId: () => CertifiedInvalidBlobId,
  CertifiedMessage: () => CertifiedMessage,
  DenyListBlobDeleted: () => DenyListBlobDeleted,
  DenyListUpdateMessage: () => DenyListUpdateMessage,
  ProofOfPossessionMessage: () => ProofOfPossessionMessage
});
module.exports = __toCommonJS(messages_exports);
var import_bcs = require("@mysten/sui/bcs");
function ProofOfPossessionMessage() {
  return import_bcs.bcs.struct("ProofOfPossessionMessage", {
    intent_type: import_bcs.bcs.u8(),
    intent_version: import_bcs.bcs.u8(),
    intent_app: import_bcs.bcs.u8(),
    epoch: import_bcs.bcs.u32(),
    sui_address: import_bcs.bcs.Address,
    bls_key: import_bcs.bcs.vector(import_bcs.bcs.u8())
  });
}
function CertifiedMessage() {
  return import_bcs.bcs.struct("CertifiedMessage", {
    intent_type: import_bcs.bcs.u8(),
    intent_version: import_bcs.bcs.u8(),
    cert_epoch: import_bcs.bcs.u32(),
    message: import_bcs.bcs.vector(import_bcs.bcs.u8()),
    stake_support: import_bcs.bcs.u16()
  });
}
function CertifiedBlobMessage() {
  return import_bcs.bcs.struct("CertifiedBlobMessage", {
    blob_id: import_bcs.bcs.u256(),
    blob_persistence_type: BlobPersistenceType()
  });
}
function CertifiedInvalidBlobId() {
  return import_bcs.bcs.struct("CertifiedInvalidBlobId", {
    blob_id: import_bcs.bcs.u256()
  });
}
function DenyListUpdateMessage() {
  return import_bcs.bcs.struct("DenyListUpdateMessage", {
    storage_node_id: import_bcs.bcs.Address,
    deny_list_sequence_number: import_bcs.bcs.u64(),
    deny_list_size: import_bcs.bcs.u64(),
    deny_list_root: import_bcs.bcs.u256()
  });
}
function DenyListBlobDeleted() {
  return import_bcs.bcs.struct("DenyListBlobDeleted", {
    blob_id: import_bcs.bcs.u256()
  });
}
function BlobPersistenceType() {
  return import_bcs.bcs.enum("BlobPersistenceType", {
    Permanent: null,
    Deletable: import_bcs.bcs.struct("BlobPersistenceType.Deletable", {
      object_id: import_bcs.bcs.Address
    })
  });
}
//# sourceMappingURL=messages.js.map
