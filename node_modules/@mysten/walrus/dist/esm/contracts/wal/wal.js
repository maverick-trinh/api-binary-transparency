import { bcs } from "@mysten/sui/bcs";
import { normalizeMoveArguments } from "../utils/index.js";
import * as object from "./deps/sui/object.js";
function WAL() {
  return bcs.struct("WAL", {
    dummy_field: bcs.bool()
  });
}
function ProtectedTreasury() {
  return bcs.struct("ProtectedTreasury", {
    id: object.UID()
  });
}
function TreasuryCapKey() {
  return bcs.struct("TreasuryCapKey", {
    dummy_field: bcs.bool()
  });
}
function totalSupply(options) {
  const packageAddress = options.package ?? "@local-pkg/wal";
  const argumentsTypes = [`${packageAddress}::wal::ProtectedTreasury`];
  const parameterNames = ["treasury"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal",
    function: "total_supply",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function burn(options) {
  const packageAddress = options.package ?? "@local-pkg/wal";
  const argumentsTypes = [
    `${packageAddress}::wal::ProtectedTreasury`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["treasury", "coin"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "wal",
    function: "burn",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
export {
  ProtectedTreasury,
  TreasuryCapKey,
  WAL,
  burn,
  totalSupply
};
//# sourceMappingURL=wal.js.map
