{
  "version": 3,
  "sources": ["../../../../src/contracts/wal/wal.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n/** The WAL token is the native token for the Walrus Protocol. */\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport { normalizeMoveArguments } from '../utils/index.js';\nimport type { RawTransactionArgument } from '../utils/index.js';\nimport * as object from './deps/sui/object.js';\nexport function WAL() {\n\treturn bcs.struct('WAL', {\n\t\tdummy_field: bcs.bool(),\n\t});\n}\nexport function ProtectedTreasury() {\n\treturn bcs.struct('ProtectedTreasury', {\n\t\tid: object.UID(),\n\t});\n}\nexport function TreasuryCapKey() {\n\treturn bcs.struct('TreasuryCapKey', {\n\t\tdummy_field: bcs.bool(),\n\t});\n}\nexport interface TotalSupplyArguments {\n\ttreasury: RawTransactionArgument<string>;\n}\nexport interface TotalSupplyOptions {\n\tpackage?: string;\n\targuments: TotalSupplyArguments | [treasury: RawTransactionArgument<string>];\n}\n/** Get the total supply of the WAL token. */\nexport function totalSupply(options: TotalSupplyOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal';\n\tconst argumentsTypes = [`${packageAddress}::wal::ProtectedTreasury`] satisfies string[];\n\tconst parameterNames = ['treasury'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal',\n\t\t\tfunction: 'total_supply',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface BurnArguments {\n\ttreasury: RawTransactionArgument<string>;\n\tcoin: RawTransactionArgument<string>;\n}\nexport interface BurnOptions {\n\tpackage?: string;\n\targuments:\n\t\t| BurnArguments\n\t\t| [treasury: RawTransactionArgument<string>, coin: RawTransactionArgument<string>];\n}\n/** Burns a `Coin<WAL>` from the sender. */\nexport function burn(options: BurnOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/wal';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::wal::ProtectedTreasury`,\n\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t] satisfies string[];\n\tconst parameterNames = ['treasury', 'coin'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'wal',\n\t\t\tfunction: 'burn',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\n"],
  "mappings": "AAKA,SAAS,WAAW;AAEpB,SAAS,8BAA8B;AAEvC,YAAY,YAAY;AACjB,SAAS,MAAM;AACrB,SAAO,IAAI,OAAO,OAAO;AAAA,IACxB,aAAa,IAAI,KAAK;AAAA,EACvB,CAAC;AACF;AACO,SAAS,oBAAoB;AACnC,SAAO,IAAI,OAAO,qBAAqB;AAAA,IACtC,IAAI,OAAO,IAAI;AAAA,EAChB,CAAC;AACF;AACO,SAAS,iBAAiB;AAChC,SAAO,IAAI,OAAO,kBAAkB;AAAA,IACnC,aAAa,IAAI,KAAK;AAAA,EACvB,CAAC;AACF;AASO,SAAS,YAAY,SAA6B;AACxD,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB,CAAC,GAAG,cAAc,0BAA0B;AACnE,QAAM,iBAAiB,CAAC,UAAU;AAClC,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AAYO,SAAS,KAAK,SAAsB;AAC1C,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB,GAAG,cAAc;AAAA,IACjB,kFAAkF,cAAc;AAAA,EACjG;AACA,QAAM,iBAAiB,CAAC,YAAY,MAAM;AAC1C,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;",
  "names": []
}
