{
  "version": 3,
  "sources": ["../../../../src/contracts/walrus/staking_inner.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { bcs } from '@mysten/sui/bcs';\nimport * as object_table from './deps/sui/object_table.js';\nimport * as extended_field from './extended_field.js';\nimport * as committee from './committee.js';\nimport * as epoch_parameters from './epoch_parameters.js';\nexport function StakingInnerV1() {\n\treturn bcs.struct('StakingInnerV1', {\n\t\t/** The number of shards in the system. */\n\t\tn_shards: bcs.u16(),\n\t\t/** The duration of an epoch in ms. Does not affect the first (zero) epoch. */\n\t\tepoch_duration: bcs.u64(),\n\t\t/**\n\t\t * Special parameter, used only for the first epoch. The timestamp when the first\n\t\t * epoch can be started.\n\t\t */\n\t\tfirst_epoch_start: bcs.u64(),\n\t\t/**\n\t\t * Stored staking pools, each identified by a unique `ID` and contains the\n\t\t * `StakingPool` object. Uses `ObjectTable` to make the pool discovery easier by\n\t\t * avoiding wrapping.\n\t\t *\n\t\t * The key is the ID of the staking pool.\n\t\t */\n\t\tpools: object_table.ObjectTable(),\n\t\t/**\n\t\t * The current epoch of the Walrus system. The epochs are not the same as the Sui\n\t\t * epochs, not to be mistaken with `ctx.epoch()`.\n\t\t */\n\t\tepoch: bcs.u32(),\n\t\t/** Stores the active set of storage nodes. Tracks the total amount of staked WAL. */\n\t\tactive_set: extended_field.ExtendedField(),\n\t\t/** The next committee in the system. */\n\t\tnext_committee: bcs.option(committee.Committee()),\n\t\t/** The current committee in the system. */\n\t\tcommittee: committee.Committee(),\n\t\t/** The previous committee in the system. */\n\t\tprevious_committee: committee.Committee(),\n\t\t/** The next epoch parameters. */\n\t\tnext_epoch_params: bcs.option(epoch_parameters.EpochParams()),\n\t\t/** The state of the current epoch. */\n\t\tepoch_state: EpochState(),\n\t\t/**\n\t\t * The public keys for the next epoch. The keys are stored in a sorted `VecMap`,\n\t\t * and mirror the order of the nodes in the `next_committee`. The value is set in\n\t\t * the `select_committee` function and consumed in the `next_bls_committee`\n\t\t * function.\n\t\t */\n\t\tnext_epoch_public_keys: extended_field.ExtendedField(),\n\t});\n}\n/** The epoch state. */\nexport function EpochState() {\n\treturn bcs.enum('EpochState', {\n\t\tEpochChangeSync: bcs.u16(),\n\t\tEpochChangeDone: bcs.u64(),\n\t\tNextParamsSelected: bcs.u64(),\n\t});\n}\n"],
  "mappings": "AAEA,SAAS,WAAW;AACpB,YAAY,kBAAkB;AAC9B,YAAY,oBAAoB;AAChC,YAAY,eAAe;AAC3B,YAAY,sBAAsB;AAC3B,SAAS,iBAAiB;AAChC,SAAO,IAAI,OAAO,kBAAkB;AAAA;AAAA,IAEnC,UAAU,IAAI,IAAI;AAAA;AAAA,IAElB,gBAAgB,IAAI,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,IAKxB,mBAAmB,IAAI,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQ3B,OAAO,aAAa,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,IAKhC,OAAO,IAAI,IAAI;AAAA;AAAA,IAEf,YAAY,eAAe,cAAc;AAAA;AAAA,IAEzC,gBAAgB,IAAI,OAAO,UAAU,UAAU,CAAC;AAAA;AAAA,IAEhD,WAAW,UAAU,UAAU;AAAA;AAAA,IAE/B,oBAAoB,UAAU,UAAU;AAAA;AAAA,IAExC,mBAAmB,IAAI,OAAO,iBAAiB,YAAY,CAAC;AAAA;AAAA,IAE5D,aAAa,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOxB,wBAAwB,eAAe,cAAc;AAAA,EACtD,CAAC;AACF;AAEO,SAAS,aAAa;AAC5B,SAAO,IAAI,KAAK,cAAc;AAAA,IAC7B,iBAAiB,IAAI,IAAI;AAAA,IACzB,iBAAiB,IAAI,IAAI;AAAA,IACzB,oBAAoB,IAAI,IAAI;AAAA,EAC7B,CAAC;AACF;",
  "names": []
}
