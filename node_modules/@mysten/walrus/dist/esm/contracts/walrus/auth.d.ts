import type { BcsType } from '@mysten/sui/bcs';
import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from '../utils/index.js';
/**
 * Authentication for either a sender or an object. Unlike the `Authorized` type,
 * it cannot be stored and must be used or ignored in the same transaction.
 */
export declare function Authenticated(): BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
    Sender: string;
    Object: string;
}, "Object" | "Sender">, import("@mysten/bcs").EnumInputShape<{
    Sender: string | Uint8Array<ArrayBufferLike>;
    Object: string | Uint8Array<ArrayBufferLike>;
}>>;
/**
 * Defines the ways to authorize an action. It can be either an address - checked
 * with `ctx.sender()`, - or an object - checked with `object::id(..)`.
 */
export declare function Authorized(): BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
    Address: string;
    ObjectID: string;
}, "Address" | "ObjectID">, import("@mysten/bcs").EnumInputShape<{
    Address: string | Uint8Array<ArrayBufferLike>;
    ObjectID: string | Uint8Array<ArrayBufferLike>;
}>>;
export interface AuthenticateSenderOptions {
    package?: string;
    arguments?: [];
}
/** Authenticates the sender as the authorizer. */
export declare function authenticateSender(options?: AuthenticateSenderOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface AuthenticateWithObjectArguments<T extends BcsType<any>> {
    obj: RawTransactionArgument<T>;
}
export interface AuthenticateWithObjectOptions<T extends BcsType<any>> {
    package?: string;
    arguments: AuthenticateWithObjectArguments<T> | [obj: RawTransactionArgument<T>];
    typeArguments: [string];
}
/** Authenticates an object as the authorizer. */
export declare function authenticateWithObject<T extends BcsType<any>>(options: AuthenticateWithObjectOptions<T>): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface AuthorizedAddressArguments {
    addr: RawTransactionArgument<string>;
}
export interface AuthorizedAddressOptions {
    package?: string;
    arguments: AuthorizedAddressArguments | [addr: RawTransactionArgument<string>];
}
/** Returns the `Authorized` as an address. */
export declare function authorizedAddress(options: AuthorizedAddressOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface AuthorizedObjectArguments {
    id: RawTransactionArgument<string>;
}
export interface AuthorizedObjectOptions {
    package?: string;
    arguments: AuthorizedObjectArguments | [id: RawTransactionArgument<string>];
}
/** Returns the `Authorized` as an object. */
export declare function authorizedObject(options: AuthorizedObjectOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
