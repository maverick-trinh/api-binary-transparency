export declare function StakingInnerV1(): import("@mysten/sui/bcs").BcsType<{
    n_shards: number;
    epoch_duration: string;
    first_epoch_start: string;
    pools: {
        id: {
            id: string;
        };
        size: string;
    };
    epoch: number;
    active_set: {
        id: {
            id: string;
        };
    };
    next_committee: [{
        contents: {
            key: string;
            value: number[];
        }[];
    }] | null;
    committee: [{
        contents: {
            key: string;
            value: number[];
        }[];
    }];
    previous_committee: [{
        contents: {
            key: string;
            value: number[];
        }[];
    }];
    next_epoch_params: {
        total_capacity_size: string;
        storage_price_per_unit_size: string;
        write_price_per_unit_size: string;
    } | null;
    epoch_state: import("@mysten/bcs").EnumOutputShapeWithKeys<{
        EpochChangeSync: number;
        EpochChangeDone: string;
        NextParamsSelected: string;
    }, "EpochChangeSync" | "EpochChangeDone" | "NextParamsSelected">;
    next_epoch_public_keys: {
        id: {
            id: string;
        };
    };
}, {
    n_shards: number;
    epoch_duration: string | number | bigint;
    first_epoch_start: string | number | bigint;
    pools: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
        size: string | number | bigint;
    };
    epoch: number;
    active_set: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
    };
    next_committee: readonly [{
        contents: Iterable<{
            key: string | Uint8Array<ArrayBufferLike>;
            value: Iterable<number> & {
                length: number;
            };
        }> & {
            length: number;
        };
    }] | null | undefined;
    committee: readonly [{
        contents: Iterable<{
            key: string | Uint8Array<ArrayBufferLike>;
            value: Iterable<number> & {
                length: number;
            };
        }> & {
            length: number;
        };
    }];
    previous_committee: readonly [{
        contents: Iterable<{
            key: string | Uint8Array<ArrayBufferLike>;
            value: Iterable<number> & {
                length: number;
            };
        }> & {
            length: number;
        };
    }];
    next_epoch_params: {
        total_capacity_size: string | number | bigint;
        storage_price_per_unit_size: string | number | bigint;
        write_price_per_unit_size: string | number | bigint;
    } | null | undefined;
    epoch_state: import("@mysten/bcs").EnumInputShape<{
        EpochChangeSync: number;
        EpochChangeDone: string | number | bigint;
        NextParamsSelected: string | number | bigint;
    }>;
    next_epoch_public_keys: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
    };
}>;
/** The epoch state. */
export declare function EpochState(): import("@mysten/sui/bcs").BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
    EpochChangeSync: number;
    EpochChangeDone: string;
    NextParamsSelected: string;
}, "EpochChangeSync" | "EpochChangeDone" | "NextParamsSelected">, import("@mysten/bcs").EnumInputShape<{
    EpochChangeSync: number;
    EpochChangeDone: string | number | bigint;
    NextParamsSelected: string | number | bigint;
}>>;
