export declare function SystemStateInnerV1(): import("@mysten/sui/bcs").BcsType<{
    committee: {
        members: {
            public_key: {
                bytes: number[];
            };
            weight: number;
            node_id: string;
        }[];
        n_shards: number;
        epoch: number;
        total_aggregated_key: {
            bytes: number[];
        };
    };
    total_capacity_size: string;
    used_capacity_size: string;
    storage_price_per_unit_size: string;
    write_price_per_unit_size: string;
    future_accounting: {
        current_index: number;
        length: number;
        ring_buffer: {
            epoch: number;
            used_capacity: string;
            rewards_to_distribute: {
                value: string;
            };
        }[];
    };
    event_blob_certification_state: {
        latest_certified_blob: {
            blob_id: string;
            ending_checkpoint_sequence_number: string;
        } | null;
        aggregate_weight_per_blob: {
            contents: {
                key: {
                    blob_id: string;
                    ending_checkpoint_sequence_number: string;
                };
                value: number;
            }[];
        };
    };
    deny_list_sizes: {
        id: {
            id: string;
        };
    };
}, {
    committee: {
        members: Iterable<{
            public_key: {
                bytes: Iterable<number> & {
                    length: number;
                };
            };
            weight: number;
            node_id: string | Uint8Array<ArrayBufferLike>;
        }> & {
            length: number;
        };
        n_shards: number;
        epoch: number;
        total_aggregated_key: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
    };
    total_capacity_size: string | number | bigint;
    used_capacity_size: string | number | bigint;
    storage_price_per_unit_size: string | number | bigint;
    write_price_per_unit_size: string | number | bigint;
    future_accounting: {
        current_index: number;
        length: number;
        ring_buffer: Iterable<{
            epoch: number;
            used_capacity: string | number | bigint;
            rewards_to_distribute: {
                value: string | number | bigint;
            };
        }> & {
            length: number;
        };
    };
    event_blob_certification_state: {
        latest_certified_blob: {
            blob_id: string | number | bigint;
            ending_checkpoint_sequence_number: string | number | bigint;
        } | null | undefined;
        aggregate_weight_per_blob: {
            contents: Iterable<{
                key: {
                    blob_id: string | number | bigint;
                    ending_checkpoint_sequence_number: string | number | bigint;
                };
                value: number;
            }> & {
                length: number;
            };
        };
    };
    deny_list_sizes: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
    };
}>;
