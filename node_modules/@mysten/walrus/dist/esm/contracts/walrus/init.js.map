{
  "version": 3,
  "sources": ["../../../../src/contracts/walrus/init.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport { normalizeMoveArguments } from '../utils/index.js';\nimport type { RawTransactionArgument } from '../utils/index.js';\nimport * as object from './deps/sui/object.js';\nimport * as _package from './deps/sui/package.js';\nexport function INIT() {\n\treturn bcs.struct('INIT', {\n\t\tdummy_field: bcs.bool(),\n\t});\n}\nexport function InitCap() {\n\treturn bcs.struct('InitCap', {\n\t\tid: object.UID(),\n\t\tpublisher: _package.Publisher(),\n\t});\n}\nexport interface InitializeWalrusArguments {\n\tinitCap: RawTransactionArgument<string>;\n\tupgradeCap: RawTransactionArgument<string>;\n\tepochZeroDuration: RawTransactionArgument<number | bigint>;\n\tepochDuration: RawTransactionArgument<number | bigint>;\n\tnShards: RawTransactionArgument<number>;\n\tmaxEpochsAhead: RawTransactionArgument<number>;\n}\nexport interface InitializeWalrusOptions {\n\tpackage?: string;\n\targuments:\n\t\t| InitializeWalrusArguments\n\t\t| [\n\t\t\t\tinitCap: RawTransactionArgument<string>,\n\t\t\t\tupgradeCap: RawTransactionArgument<string>,\n\t\t\t\tepochZeroDuration: RawTransactionArgument<number | bigint>,\n\t\t\t\tepochDuration: RawTransactionArgument<number | bigint>,\n\t\t\t\tnShards: RawTransactionArgument<number>,\n\t\t\t\tmaxEpochsAhead: RawTransactionArgument<number>,\n\t\t  ];\n}\n/**\n * Initializes Walrus and shares the system and staking objects.\n *\n * This can only be called once, after which the `InitCap` is destroyed.\n */\nexport function initializeWalrus(options: InitializeWalrusOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::init::InitCap`,\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::package::UpgradeCap',\n\t\t'u64',\n\t\t'u64',\n\t\t'u16',\n\t\t'u32',\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::clock::Clock',\n\t] satisfies string[];\n\tconst parameterNames = [\n\t\t'initCap',\n\t\t'upgradeCap',\n\t\t'epochZeroDuration',\n\t\t'epochDuration',\n\t\t'nShards',\n\t\t'maxEpochsAhead',\n\t\t'clock',\n\t];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'init',\n\t\t\tfunction: 'initialize_walrus',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface MigrateArguments {\n\tstaking: RawTransactionArgument<string>;\n\tsystem: RawTransactionArgument<string>;\n}\nexport interface MigrateOptions {\n\tpackage?: string;\n\targuments:\n\t\t| MigrateArguments\n\t\t| [staking: RawTransactionArgument<string>, system: RawTransactionArgument<string>];\n}\n/**\n * Migrates the staking and system objects to the new package ID.\n *\n * This must be called in the new package after an upgrade is committed to emit an\n * event that informs all storage nodes and prevent previous package versions from\n * being used.\n */\nexport function migrate(options: MigrateOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::staking::Staking`,\n\t\t`${packageAddress}::system::System`,\n\t] satisfies string[];\n\tconst parameterNames = ['staking', 'system'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'init',\n\t\t\tfunction: 'migrate',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\n"],
  "mappings": "AAEA,SAAS,WAAW;AAEpB,SAAS,8BAA8B;AAEvC,YAAY,YAAY;AACxB,YAAY,cAAc;AACnB,SAAS,OAAO;AACtB,SAAO,IAAI,OAAO,QAAQ;AAAA,IACzB,aAAa,IAAI,KAAK;AAAA,EACvB,CAAC;AACF;AACO,SAAS,UAAU;AACzB,SAAO,IAAI,OAAO,WAAW;AAAA,IAC5B,IAAI,OAAO,IAAI;AAAA,IACf,WAAW,SAAS,UAAU;AAAA,EAC/B,CAAC;AACF;AA2BO,SAAS,iBAAiB,SAAkC;AAClE,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB,GAAG,cAAc;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACA,QAAM,iBAAiB;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACA,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;AAkBO,SAAS,QAAQ,SAAyB;AAChD,QAAM,iBAAiB,QAAQ,WAAW;AAC1C,QAAM,iBAAiB;AAAA,IACtB,GAAG,cAAc;AAAA,IACjB,GAAG,cAAc;AAAA,EAClB;AACA,QAAM,iBAAiB,CAAC,WAAW,QAAQ;AAC3C,SAAO,CAAC,OACP,GAAG,SAAS;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,uBAAuB,QAAQ,WAAW,gBAAgB,cAAc;AAAA,EACpF,CAAC;AACH;",
  "names": []
}
