{
  "version": 3,
  "sources": ["../../../../../../src/contracts/walrus/deps/sui/vec_map.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { bcs } from '@mysten/sui/bcs';\nimport type { BcsType } from '@mysten/sui/bcs';\n/**\n * A map data structure backed by a vector. The map is guaranteed not to contain\n * duplicate keys, but entries are _not_ sorted by key--entries are included in\n * insertion order. All operations are O(N) in the size of the map--the intention\n * of this data structure is only to provide the convenience of programming against\n * a map API. Large maps should use handwritten parent/child relationships instead.\n * Maps that need sorted iteration rather than insertion order iteration should\n * also be handwritten.\n */\nexport function VecMap<K extends BcsType<any>, V extends BcsType<any>>(...typeParameters: [K, V]) {\n\treturn bcs.struct('VecMap', {\n\t\tcontents: bcs.vector(Entry(typeParameters[0], typeParameters[1])),\n\t});\n}\n/** An entry in the map */\nexport function Entry<K extends BcsType<any>, V extends BcsType<any>>(...typeParameters: [K, V]) {\n\treturn bcs.struct('Entry', {\n\t\tkey: typeParameters[0],\n\t\tvalue: typeParameters[1],\n\t});\n}\n"],
  "mappings": "AAEA,SAAS,WAAW;AAWb,SAAS,UAA0D,gBAAwB;AACjG,SAAO,IAAI,OAAO,UAAU;AAAA,IAC3B,UAAU,IAAI,OAAO,MAAM,eAAe,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;AAAA,EACjE,CAAC;AACF;AAEO,SAAS,SAAyD,gBAAwB;AAChG,SAAO,IAAI,OAAO,SAAS;AAAA,IAC1B,KAAK,eAAe,CAAC;AAAA,IACrB,OAAO,eAAe,CAAC;AAAA,EACxB,CAAC;AACF;",
  "names": []
}
