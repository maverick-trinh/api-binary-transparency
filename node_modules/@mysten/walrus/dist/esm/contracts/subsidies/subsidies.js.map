{
  "version": 3,
  "sources": ["../../../../src/contracts/subsidies/subsidies.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Module: `subsidies`\n *\n * Module to manage a shared subsidy pool, allowing for discounted storage costs\n * for buyers and contributing to a subsidy for storage nodes. It provides\n * functionality to:\n *\n * - Add funds to the shared subsidy pool.\n * - Set subsidy rates for buyers and storage nodes.\n * - Apply subsidies when reserving storage or extending blob lifetimes.\n */\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport { normalizeMoveArguments } from '../utils/index.js';\nimport type { RawTransactionArgument } from '../utils/index.js';\nimport * as object from './deps/sui/object.js';\nimport * as balance from './deps/sui/balance.js';\nimport * as coin from './deps/sui/coin.js';\nexport function V3() {\n\treturn bcs.tuple([bcs.bool()], { name: 'V3' });\n}\nexport function AdminCap() {\n\treturn bcs.struct('AdminCap', {\n\t\tid: object.UID(),\n\t\tsubsidies_id: bcs.Address,\n\t});\n}\nexport function Subsidies() {\n\treturn bcs.struct('Subsidies', {\n\t\tid: object.UID(),\n\t\t/**\n\t\t * The subsidy rate applied to the buyer at the moment of storage purchase in basis\n\t\t * points.\n\t\t */\n\t\tbuyer_subsidy_rate: bcs.u16(),\n\t\t/**\n\t\t * The subsidy rate applied to the storage node when buying storage in basis\n\t\t * points.\n\t\t */\n\t\tsystem_subsidy_rate: bcs.u16(),\n\t\t/** The balance of funds available in the subsidy pool. */\n\t\tsubsidy_pool: balance.Balance(),\n\t\t/** Package ID of the subsidies contract. */\n\t\tpackage_id: bcs.Address,\n\t\t/** The version of the subsidies contract. */\n\t\tversion: bcs.u64(),\n\t});\n}\nexport function CombinedPayment() {\n\treturn bcs.struct('CombinedPayment', {\n\t\tpayment: coin.Coin(),\n\t\tinitial_payment_value: bcs.u64(),\n\t\tinitial_pool_value: bcs.u64(),\n\t});\n}\nexport interface NewArguments {\n\tpackageId: RawTransactionArgument<string>;\n}\nexport interface NewOptions {\n\tpackage?: string;\n\targuments: NewArguments | [packageId: RawTransactionArgument<string>];\n}\n/** Creates a new `Subsidies` object and an `AdminCap`. */\nexport function _new(options: NewOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus_subsidies';\n\tconst argumentsTypes = [\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::object::ID',\n\t] satisfies string[];\n\tconst parameterNames = ['packageId'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'subsidies',\n\t\t\tfunction: 'new',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface NewWithInitialRatesAndFundsArguments {\n\tpackageId: RawTransactionArgument<string>;\n\tinitialBuyerSubsidyRate: RawTransactionArgument<number>;\n\tinitialSystemSubsidyRate: RawTransactionArgument<number>;\n\tinitialFunds: RawTransactionArgument<string>;\n}\nexport interface NewWithInitialRatesAndFundsOptions {\n\tpackage?: string;\n\targuments:\n\t\t| NewWithInitialRatesAndFundsArguments\n\t\t| [\n\t\t\t\tpackageId: RawTransactionArgument<string>,\n\t\t\t\tinitialBuyerSubsidyRate: RawTransactionArgument<number>,\n\t\t\t\tinitialSystemSubsidyRate: RawTransactionArgument<number>,\n\t\t\t\tinitialFunds: RawTransactionArgument<string>,\n\t\t  ];\n}\n/** Creates a new `Subsidies` object with initial rates and funds and an `AdminCap`. */\nexport function newWithInitialRatesAndFunds(options: NewWithInitialRatesAndFundsOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus_subsidies';\n\tconst argumentsTypes = [\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::object::ID',\n\t\t'u16',\n\t\t'u16',\n\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t] satisfies string[];\n\tconst parameterNames = [\n\t\t'packageId',\n\t\t'initialBuyerSubsidyRate',\n\t\t'initialSystemSubsidyRate',\n\t\t'initialFunds',\n\t];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'subsidies',\n\t\t\tfunction: 'new_with_initial_rates_and_funds',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface AddFundsArguments {\n\tself: RawTransactionArgument<string>;\n\tfunds: RawTransactionArgument<string>;\n}\nexport interface AddFundsOptions {\n\tpackage?: string;\n\targuments:\n\t\t| AddFundsArguments\n\t\t| [self: RawTransactionArgument<string>, funds: RawTransactionArgument<string>];\n}\n/**\n * Add additional funds to the subsidy pool.\n *\n * These funds will be used to provide discounts for buyers and rewards to storage\n * nodes.\n */\nexport function addFunds(options: AddFundsOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus_subsidies';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::subsidies::Subsidies`,\n\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'funds'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'subsidies',\n\t\t\tfunction: 'add_funds',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface SetBuyerSubsidyRateArguments {\n\tself: RawTransactionArgument<string>;\n\tcap: RawTransactionArgument<string>;\n\tnewRate: RawTransactionArgument<number>;\n}\nexport interface SetBuyerSubsidyRateOptions {\n\tpackage?: string;\n\targuments:\n\t\t| SetBuyerSubsidyRateArguments\n\t\t| [\n\t\t\t\tself: RawTransactionArgument<string>,\n\t\t\t\tcap: RawTransactionArgument<string>,\n\t\t\t\tnewRate: RawTransactionArgument<number>,\n\t\t  ];\n}\n/**\n * Set the subsidy rate for buyers, in basis points.\n *\n * Aborts if new_rate is greater than the max value.\n */\nexport function setBuyerSubsidyRate(options: SetBuyerSubsidyRateOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus_subsidies';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::subsidies::Subsidies`,\n\t\t`${packageAddress}::subsidies::AdminCap`,\n\t\t'u16',\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'cap', 'newRate'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'subsidies',\n\t\t\tfunction: 'set_buyer_subsidy_rate',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface WithdrawBalanceArguments {\n\tself: RawTransactionArgument<string>;\n\tcap: RawTransactionArgument<string>;\n}\nexport interface WithdrawBalanceOptions {\n\tpackage?: string;\n\targuments:\n\t\t| WithdrawBalanceArguments\n\t\t| [self: RawTransactionArgument<string>, cap: RawTransactionArgument<string>];\n}\n/**\n * Allows the admin to withdraw all funds from the subsidy pool.\n *\n * This is used to migrate funds from the `Subsidies` object to the\n * `WalrusSubsidies` object in a PTB.\n */\nexport function withdrawBalance(options: WithdrawBalanceOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus_subsidies';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::subsidies::Subsidies`,\n\t\t`${packageAddress}::subsidies::AdminCap`,\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'cap'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'subsidies',\n\t\t\tfunction: 'withdraw_balance',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface SetSystemSubsidyRateArguments {\n\tself: RawTransactionArgument<string>;\n\tcap: RawTransactionArgument<string>;\n\tnewRate: RawTransactionArgument<number>;\n}\nexport interface SetSystemSubsidyRateOptions {\n\tpackage?: string;\n\targuments:\n\t\t| SetSystemSubsidyRateArguments\n\t\t| [\n\t\t\t\tself: RawTransactionArgument<string>,\n\t\t\t\tcap: RawTransactionArgument<string>,\n\t\t\t\tnewRate: RawTransactionArgument<number>,\n\t\t  ];\n}\n/**\n * Set the subsidy rate for storage nodes, in basis points.\n *\n * Aborts if new_rate is greater than the max value.\n */\nexport function setSystemSubsidyRate(options: SetSystemSubsidyRateOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus_subsidies';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::subsidies::Subsidies`,\n\t\t`${packageAddress}::subsidies::AdminCap`,\n\t\t'u16',\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'cap', 'newRate'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'subsidies',\n\t\t\tfunction: 'set_system_subsidy_rate',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ExtendBlobArguments {\n\tself: RawTransactionArgument<string>;\n\tsystem: RawTransactionArgument<string>;\n\tblob: RawTransactionArgument<string>;\n\tepochsAhead: RawTransactionArgument<number>;\n\tpayment: RawTransactionArgument<string>;\n}\nexport interface ExtendBlobOptions {\n\tpackage?: string;\n\targuments:\n\t\t| ExtendBlobArguments\n\t\t| [\n\t\t\t\tself: RawTransactionArgument<string>,\n\t\t\t\tsystem: RawTransactionArgument<string>,\n\t\t\t\tblob: RawTransactionArgument<string>,\n\t\t\t\tepochsAhead: RawTransactionArgument<number>,\n\t\t\t\tpayment: RawTransactionArgument<string>,\n\t\t  ];\n}\n/**\n * Extends a blob's lifetime and applies the buyer and storage node subsidies.\n *\n * It first extends the blob lifetime using system `extend_blob` method. Then it\n * applies the subsidies and deducts the funds from the subsidy pool.\n */\nexport function extendBlob(options: ExtendBlobOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus_subsidies';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::subsidies::Subsidies`,\n\t\t`${packageAddress}::system::System`,\n\t\t`${packageAddress}::blob::Blob`,\n\t\t'u32',\n\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'system', 'blob', 'epochsAhead', 'payment'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'subsidies',\n\t\t\tfunction: 'extend_blob',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface ReserveSpaceArguments {\n\tself: RawTransactionArgument<string>;\n\tsystem: RawTransactionArgument<string>;\n\tstorageAmount: RawTransactionArgument<number | bigint>;\n\tepochsAhead: RawTransactionArgument<number>;\n\tpayment: RawTransactionArgument<string>;\n}\nexport interface ReserveSpaceOptions {\n\tpackage?: string;\n\targuments:\n\t\t| ReserveSpaceArguments\n\t\t| [\n\t\t\t\tself: RawTransactionArgument<string>,\n\t\t\t\tsystem: RawTransactionArgument<string>,\n\t\t\t\tstorageAmount: RawTransactionArgument<number | bigint>,\n\t\t\t\tepochsAhead: RawTransactionArgument<number>,\n\t\t\t\tpayment: RawTransactionArgument<string>,\n\t\t  ];\n}\n/**\n * Reserves storage space and applies the buyer and storage node subsidies.\n *\n * It first reserves the space using system `reserve_space` method. Then it applies\n * the subsidies and deducts the funds from the subsidy pool.\n */\nexport function reserveSpace(options: ReserveSpaceOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus_subsidies';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::subsidies::Subsidies`,\n\t\t`${packageAddress}::system::System`,\n\t\t'u64',\n\t\t'u32',\n\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t] satisfies string[];\n\tconst parameterNames = ['self', 'system', 'storageAmount', 'epochsAhead', 'payment'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'subsidies',\n\t\t\tfunction: 'reserve_space',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface RegisterBlobArguments {\n\tself: RawTransactionArgument<string>;\n\tsystem: RawTransactionArgument<string>;\n\tstorage: RawTransactionArgument<string>;\n\tblobId: RawTransactionArgument<number | bigint>;\n\trootHash: RawTransactionArgument<number | bigint>;\n\tsize: RawTransactionArgument<number | bigint>;\n\tencodingType: RawTransactionArgument<number>;\n\tdeletable: RawTransactionArgument<boolean>;\n\twritePayment: RawTransactionArgument<string>;\n}\nexport interface RegisterBlobOptions {\n\tpackage?: string;\n\targuments:\n\t\t| RegisterBlobArguments\n\t\t| [\n\t\t\t\tself: RawTransactionArgument<string>,\n\t\t\t\tsystem: RawTransactionArgument<string>,\n\t\t\t\tstorage: RawTransactionArgument<string>,\n\t\t\t\tblobId: RawTransactionArgument<number | bigint>,\n\t\t\t\trootHash: RawTransactionArgument<number | bigint>,\n\t\t\t\tsize: RawTransactionArgument<number | bigint>,\n\t\t\t\tencodingType: RawTransactionArgument<number>,\n\t\t\t\tdeletable: RawTransactionArgument<boolean>,\n\t\t\t\twritePayment: RawTransactionArgument<string>,\n\t\t  ];\n}\n/** Proxy Register blob by calling the system contract */\nexport function registerBlob(options: RegisterBlobOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus_subsidies';\n\tconst argumentsTypes = [\n\t\t`${packageAddress}::subsidies::Subsidies`,\n\t\t`${packageAddress}::system::System`,\n\t\t`${packageAddress}::storage_resource::Storage`,\n\t\t'u256',\n\t\t'u256',\n\t\t'u64',\n\t\t'u8',\n\t\t'bool',\n\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t] satisfies string[];\n\tconst parameterNames = [\n\t\t'self',\n\t\t'system',\n\t\t'storage',\n\t\t'blobId',\n\t\t'rootHash',\n\t\t'size',\n\t\t'encodingType',\n\t\t'deletable',\n\t\t'writePayment',\n\t];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'subsidies',\n\t\t\tfunction: 'register_blob',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface AdminCapSubsidiesIdArguments {\n\tadminCap: RawTransactionArgument<string>;\n}\nexport interface AdminCapSubsidiesIdOptions {\n\tpackage?: string;\n\targuments: AdminCapSubsidiesIdArguments | [adminCap: RawTransactionArgument<string>];\n}\nexport function adminCapSubsidiesId(options: AdminCapSubsidiesIdOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus_subsidies';\n\tconst argumentsTypes = [`${packageAddress}::subsidies::AdminCap`] satisfies string[];\n\tconst parameterNames = ['adminCap'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'subsidies',\n\t\t\tfunction: 'admin_cap_subsidies_id',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface SubsidyPoolValueArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface SubsidyPoolValueOptions {\n\tpackage?: string;\n\targuments: SubsidyPoolValueArguments | [self: RawTransactionArgument<string>];\n}\n/** Returns the current value of the subsidy pool. */\nexport function subsidyPoolValue(options: SubsidyPoolValueOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus_subsidies';\n\tconst argumentsTypes = [`${packageAddress}::subsidies::Subsidies`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'subsidies',\n\t\t\tfunction: 'subsidy_pool_value',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface BuyerSubsidyRateArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface BuyerSubsidyRateOptions {\n\tpackage?: string;\n\targuments: BuyerSubsidyRateArguments | [self: RawTransactionArgument<string>];\n}\n/** Returns the current rate for buyer subsidies. */\nexport function buyerSubsidyRate(options: BuyerSubsidyRateOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus_subsidies';\n\tconst argumentsTypes = [`${packageAddress}::subsidies::Subsidies`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'subsidies',\n\t\t\tfunction: 'buyer_subsidy_rate',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\nexport interface SystemSubsidyRateArguments {\n\tself: RawTransactionArgument<string>;\n}\nexport interface SystemSubsidyRateOptions {\n\tpackage?: string;\n\targuments: SystemSubsidyRateArguments | [self: RawTransactionArgument<string>];\n}\n/** Returns the current rate for storage node subsidies. */\nexport function systemSubsidyRate(options: SystemSubsidyRateOptions) {\n\tconst packageAddress = options.package ?? '@local-pkg/walrus_subsidies';\n\tconst argumentsTypes = [`${packageAddress}::subsidies::Subsidies`] satisfies string[];\n\tconst parameterNames = ['self'];\n\treturn (tx: Transaction) =>\n\t\ttx.moveCall({\n\t\t\tpackage: packageAddress,\n\t\t\tmodule: 'subsidies',\n\t\t\tfunction: 'system_subsidy_rate',\n\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames),\n\t\t});\n}\n"],
  "mappings": "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",
  "names": []
}
