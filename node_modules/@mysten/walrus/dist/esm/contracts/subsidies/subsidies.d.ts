import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from '../utils/index.js';
export declare function V3(): import("@mysten/sui/bcs").BcsType<[boolean], readonly [boolean]>;
export declare function AdminCap(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    subsidies_id: string;
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    subsidies_id: string | Uint8Array<ArrayBufferLike>;
}>;
export declare function Subsidies(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    buyer_subsidy_rate: number;
    system_subsidy_rate: number;
    subsidy_pool: {
        value: string;
    };
    package_id: string;
    version: string;
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    buyer_subsidy_rate: number;
    system_subsidy_rate: number;
    subsidy_pool: {
        value: string | number | bigint;
    };
    package_id: string | Uint8Array<ArrayBufferLike>;
    version: string | number | bigint;
}>;
export declare function CombinedPayment(): import("@mysten/sui/bcs").BcsType<{
    payment: {
        id: {
            id: string;
        };
        balance: {
            value: string;
        };
    };
    initial_payment_value: string;
    initial_pool_value: string;
}, {
    payment: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
        balance: {
            value: string | number | bigint;
        };
    };
    initial_payment_value: string | number | bigint;
    initial_pool_value: string | number | bigint;
}>;
export interface NewArguments {
    packageId: RawTransactionArgument<string>;
}
export interface NewOptions {
    package?: string;
    arguments: NewArguments | [packageId: RawTransactionArgument<string>];
}
/** Creates a new `Subsidies` object and an `AdminCap`. */
export declare function _new(options: NewOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface NewWithInitialRatesAndFundsArguments {
    packageId: RawTransactionArgument<string>;
    initialBuyerSubsidyRate: RawTransactionArgument<number>;
    initialSystemSubsidyRate: RawTransactionArgument<number>;
    initialFunds: RawTransactionArgument<string>;
}
export interface NewWithInitialRatesAndFundsOptions {
    package?: string;
    arguments: NewWithInitialRatesAndFundsArguments | [
        packageId: RawTransactionArgument<string>,
        initialBuyerSubsidyRate: RawTransactionArgument<number>,
        initialSystemSubsidyRate: RawTransactionArgument<number>,
        initialFunds: RawTransactionArgument<string>
    ];
}
/** Creates a new `Subsidies` object with initial rates and funds and an `AdminCap`. */
export declare function newWithInitialRatesAndFunds(options: NewWithInitialRatesAndFundsOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface AddFundsArguments {
    self: RawTransactionArgument<string>;
    funds: RawTransactionArgument<string>;
}
export interface AddFundsOptions {
    package?: string;
    arguments: AddFundsArguments | [self: RawTransactionArgument<string>, funds: RawTransactionArgument<string>];
}
/**
 * Add additional funds to the subsidy pool.
 *
 * These funds will be used to provide discounts for buyers and rewards to storage
 * nodes.
 */
export declare function addFunds(options: AddFundsOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface SetBuyerSubsidyRateArguments {
    self: RawTransactionArgument<string>;
    cap: RawTransactionArgument<string>;
    newRate: RawTransactionArgument<number>;
}
export interface SetBuyerSubsidyRateOptions {
    package?: string;
    arguments: SetBuyerSubsidyRateArguments | [
        self: RawTransactionArgument<string>,
        cap: RawTransactionArgument<string>,
        newRate: RawTransactionArgument<number>
    ];
}
/**
 * Set the subsidy rate for buyers, in basis points.
 *
 * Aborts if new_rate is greater than the max value.
 */
export declare function setBuyerSubsidyRate(options: SetBuyerSubsidyRateOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface WithdrawBalanceArguments {
    self: RawTransactionArgument<string>;
    cap: RawTransactionArgument<string>;
}
export interface WithdrawBalanceOptions {
    package?: string;
    arguments: WithdrawBalanceArguments | [self: RawTransactionArgument<string>, cap: RawTransactionArgument<string>];
}
/**
 * Allows the admin to withdraw all funds from the subsidy pool.
 *
 * This is used to migrate funds from the `Subsidies` object to the
 * `WalrusSubsidies` object in a PTB.
 */
export declare function withdrawBalance(options: WithdrawBalanceOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface SetSystemSubsidyRateArguments {
    self: RawTransactionArgument<string>;
    cap: RawTransactionArgument<string>;
    newRate: RawTransactionArgument<number>;
}
export interface SetSystemSubsidyRateOptions {
    package?: string;
    arguments: SetSystemSubsidyRateArguments | [
        self: RawTransactionArgument<string>,
        cap: RawTransactionArgument<string>,
        newRate: RawTransactionArgument<number>
    ];
}
/**
 * Set the subsidy rate for storage nodes, in basis points.
 *
 * Aborts if new_rate is greater than the max value.
 */
export declare function setSystemSubsidyRate(options: SetSystemSubsidyRateOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface ExtendBlobArguments {
    self: RawTransactionArgument<string>;
    system: RawTransactionArgument<string>;
    blob: RawTransactionArgument<string>;
    epochsAhead: RawTransactionArgument<number>;
    payment: RawTransactionArgument<string>;
}
export interface ExtendBlobOptions {
    package?: string;
    arguments: ExtendBlobArguments | [
        self: RawTransactionArgument<string>,
        system: RawTransactionArgument<string>,
        blob: RawTransactionArgument<string>,
        epochsAhead: RawTransactionArgument<number>,
        payment: RawTransactionArgument<string>
    ];
}
/**
 * Extends a blob's lifetime and applies the buyer and storage node subsidies.
 *
 * It first extends the blob lifetime using system `extend_blob` method. Then it
 * applies the subsidies and deducts the funds from the subsidy pool.
 */
export declare function extendBlob(options: ExtendBlobOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface ReserveSpaceArguments {
    self: RawTransactionArgument<string>;
    system: RawTransactionArgument<string>;
    storageAmount: RawTransactionArgument<number | bigint>;
    epochsAhead: RawTransactionArgument<number>;
    payment: RawTransactionArgument<string>;
}
export interface ReserveSpaceOptions {
    package?: string;
    arguments: ReserveSpaceArguments | [
        self: RawTransactionArgument<string>,
        system: RawTransactionArgument<string>,
        storageAmount: RawTransactionArgument<number | bigint>,
        epochsAhead: RawTransactionArgument<number>,
        payment: RawTransactionArgument<string>
    ];
}
/**
 * Reserves storage space and applies the buyer and storage node subsidies.
 *
 * It first reserves the space using system `reserve_space` method. Then it applies
 * the subsidies and deducts the funds from the subsidy pool.
 */
export declare function reserveSpace(options: ReserveSpaceOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface RegisterBlobArguments {
    self: RawTransactionArgument<string>;
    system: RawTransactionArgument<string>;
    storage: RawTransactionArgument<string>;
    blobId: RawTransactionArgument<number | bigint>;
    rootHash: RawTransactionArgument<number | bigint>;
    size: RawTransactionArgument<number | bigint>;
    encodingType: RawTransactionArgument<number>;
    deletable: RawTransactionArgument<boolean>;
    writePayment: RawTransactionArgument<string>;
}
export interface RegisterBlobOptions {
    package?: string;
    arguments: RegisterBlobArguments | [
        self: RawTransactionArgument<string>,
        system: RawTransactionArgument<string>,
        storage: RawTransactionArgument<string>,
        blobId: RawTransactionArgument<number | bigint>,
        rootHash: RawTransactionArgument<number | bigint>,
        size: RawTransactionArgument<number | bigint>,
        encodingType: RawTransactionArgument<number>,
        deletable: RawTransactionArgument<boolean>,
        writePayment: RawTransactionArgument<string>
    ];
}
/** Proxy Register blob by calling the system contract */
export declare function registerBlob(options: RegisterBlobOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface AdminCapSubsidiesIdArguments {
    adminCap: RawTransactionArgument<string>;
}
export interface AdminCapSubsidiesIdOptions {
    package?: string;
    arguments: AdminCapSubsidiesIdArguments | [adminCap: RawTransactionArgument<string>];
}
export declare function adminCapSubsidiesId(options: AdminCapSubsidiesIdOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface SubsidyPoolValueArguments {
    self: RawTransactionArgument<string>;
}
export interface SubsidyPoolValueOptions {
    package?: string;
    arguments: SubsidyPoolValueArguments | [self: RawTransactionArgument<string>];
}
/** Returns the current value of the subsidy pool. */
export declare function subsidyPoolValue(options: SubsidyPoolValueOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface BuyerSubsidyRateArguments {
    self: RawTransactionArgument<string>;
}
export interface BuyerSubsidyRateOptions {
    package?: string;
    arguments: BuyerSubsidyRateArguments | [self: RawTransactionArgument<string>];
}
/** Returns the current rate for buyer subsidies. */
export declare function buyerSubsidyRate(options: BuyerSubsidyRateOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
export interface SystemSubsidyRateArguments {
    self: RawTransactionArgument<string>;
}
export interface SystemSubsidyRateOptions {
    package?: string;
    arguments: SystemSubsidyRateArguments | [self: RawTransactionArgument<string>];
}
/** Returns the current rate for storage node subsidies. */
export declare function systemSubsidyRate(options: SystemSubsidyRateOptions): (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
