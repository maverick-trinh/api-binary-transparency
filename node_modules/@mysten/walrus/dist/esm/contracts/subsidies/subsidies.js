import { bcs } from "@mysten/sui/bcs";
import { normalizeMoveArguments } from "../utils/index.js";
import * as object from "./deps/sui/object.js";
import * as balance from "./deps/sui/balance.js";
import * as coin from "./deps/sui/coin.js";
function V3() {
  return bcs.tuple([bcs.bool()], { name: "V3" });
}
function AdminCap() {
  return bcs.struct("AdminCap", {
    id: object.UID(),
    subsidies_id: bcs.Address
  });
}
function Subsidies() {
  return bcs.struct("Subsidies", {
    id: object.UID(),
    /**
     * The subsidy rate applied to the buyer at the moment of storage purchase in basis
     * points.
     */
    buyer_subsidy_rate: bcs.u16(),
    /**
     * The subsidy rate applied to the storage node when buying storage in basis
     * points.
     */
    system_subsidy_rate: bcs.u16(),
    /** The balance of funds available in the subsidy pool. */
    subsidy_pool: balance.Balance(),
    /** Package ID of the subsidies contract. */
    package_id: bcs.Address,
    /** The version of the subsidies contract. */
    version: bcs.u64()
  });
}
function CombinedPayment() {
  return bcs.struct("CombinedPayment", {
    payment: coin.Coin(),
    initial_payment_value: bcs.u64(),
    initial_pool_value: bcs.u64()
  });
}
function _new(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
  ];
  const parameterNames = ["packageId"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "new",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function newWithInitialRatesAndFunds(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
    "u16",
    "u16",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = [
    "packageId",
    "initialBuyerSubsidyRate",
    "initialSystemSubsidyRate",
    "initialFunds"
  ];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "new_with_initial_rates_and_funds",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function addFunds(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    `${packageAddress}::subsidies::Subsidies`,
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "funds"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "add_funds",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setBuyerSubsidyRate(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    `${packageAddress}::subsidies::Subsidies`,
    `${packageAddress}::subsidies::AdminCap`,
    "u16"
  ];
  const parameterNames = ["self", "cap", "newRate"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "set_buyer_subsidy_rate",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function withdrawBalance(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    `${packageAddress}::subsidies::Subsidies`,
    `${packageAddress}::subsidies::AdminCap`
  ];
  const parameterNames = ["self", "cap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "withdraw_balance",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function setSystemSubsidyRate(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    `${packageAddress}::subsidies::Subsidies`,
    `${packageAddress}::subsidies::AdminCap`,
    "u16"
  ];
  const parameterNames = ["self", "cap", "newRate"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "set_system_subsidy_rate",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function extendBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    `${packageAddress}::subsidies::Subsidies`,
    `${packageAddress}::system::System`,
    `${packageAddress}::blob::Blob`,
    "u32",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "system", "blob", "epochsAhead", "payment"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "extend_blob",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function reserveSpace(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    `${packageAddress}::subsidies::Subsidies`,
    `${packageAddress}::system::System`,
    "u64",
    "u32",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = ["self", "system", "storageAmount", "epochsAhead", "payment"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "reserve_space",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function registerBlob(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [
    `${packageAddress}::subsidies::Subsidies`,
    `${packageAddress}::system::System`,
    `${packageAddress}::storage_resource::Storage`,
    "u256",
    "u256",
    "u64",
    "u8",
    "bool",
    `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
  ];
  const parameterNames = [
    "self",
    "system",
    "storage",
    "blobId",
    "rootHash",
    "size",
    "encodingType",
    "deletable",
    "writePayment"
  ];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "register_blob",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function adminCapSubsidiesId(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [`${packageAddress}::subsidies::AdminCap`];
  const parameterNames = ["adminCap"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "admin_cap_subsidies_id",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function subsidyPoolValue(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [`${packageAddress}::subsidies::Subsidies`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "subsidy_pool_value",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function buyerSubsidyRate(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [`${packageAddress}::subsidies::Subsidies`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "buyer_subsidy_rate",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
function systemSubsidyRate(options) {
  const packageAddress = options.package ?? "@local-pkg/walrus_subsidies";
  const argumentsTypes = [`${packageAddress}::subsidies::Subsidies`];
  const parameterNames = ["self"];
  return (tx) => tx.moveCall({
    package: packageAddress,
    module: "subsidies",
    function: "system_subsidy_rate",
    arguments: normalizeMoveArguments(options.arguments, argumentsTypes, parameterNames)
  });
}
export {
  AdminCap,
  CombinedPayment,
  Subsidies,
  V3,
  _new,
  addFunds,
  adminCapSubsidiesId,
  buyerSubsidyRate,
  extendBlob,
  newWithInitialRatesAndFunds,
  registerBlob,
  reserveSpace,
  setBuyerSubsidyRate,
  setSystemSubsidyRate,
  subsidyPoolValue,
  systemSubsidyRate,
  withdrawBalance
};
//# sourceMappingURL=subsidies.js.map
