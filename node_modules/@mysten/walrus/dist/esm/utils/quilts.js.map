{
  "version": 3,
  "sources": ["../../../src/utils/quilts.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { EncodingType } from '../types.js';\nimport { QuiltPatchId } from './bcs.js';\nimport { fromUrlSafeBase64 } from './index.js';\n\nexport const QUILT_INDEX_SIZE_BYTES_LENGTH = 4;\nexport const QUILT_VERSION_BYTES_LENGTH = 1;\nexport const QUILT_INDEX_PREFIX_SIZE = QUILT_VERSION_BYTES_LENGTH + QUILT_INDEX_SIZE_BYTES_LENGTH;\nexport const QUILT_PATCH_BLOB_HEADER_SIZE = 1 + 4 + 1; // bcs length of QuiltPatchBlobHeader\n\nexport const BLOB_IDENTIFIER_SIZE_BYTES_LENGTH = 2;\nexport const TAGS_SIZE_BYTES_LENGTH = 2;\nexport const MAX_BLOB_IDENTIFIER_BYTES_LENGTH = (1 << (8 * BLOB_IDENTIFIER_SIZE_BYTES_LENGTH)) - 1;\nexport const MAX_NUM_SLIVERS_FOR_QUILT_INDEX = 10;\n\nexport const HAS_TAGS_FLAG = 1 << 0;\n\nconst REQUIRED_ALIGNMENT_BY_ENCODING_TYPE = {\n\tRS2: 2,\n\tRedStuff: 2,\n};\n\nconst MAX_SYMBOL_SIZE_BY_ENCODING_TYPE = {\n\tRS2: 2 ** 16 - 1,\n\tRedStuff: 2 ** 16 - 1,\n};\n\n/**\n * Finds the minimum symbol size needed to store blobs in a fixed number of columns.\n * Each blob must be stored in consecutive columns exclusively.\n *\n * A binary search is used to find the minimum symbol size:\n * 1. Compute the upper and lower bounds for the symbol size.\n * 2. Check if the all the blobs can be fit into the quilt with the current symbol size.\n * 3. Adjust the bounds based on the result and repeat until the symbol size is found.\n *\n * @param blobsSizes - Slice of blob lengths, including the index size as the first element.\n *   Note that the len of the blob_size should be between 1 and n_columns.\n * @param nColumns - Number of columns available.\n * @param nRows - Number of rows available.\n * @param maxNumColumnsForQuiltIndex - The maximum number of columns that can be used to\n *   store the quilt index.\n * @param encodingType - The encoding type to use.\n *\n * @returns The minimum symbol size needed.\n **/\nexport function computeSymbolSize(\n\tblobsSizes: number[],\n\tnColumns: number,\n\tnRows: number,\n\tmaxNumColumnsForQuiltIndex: number,\n\tencodingType: EncodingType = 'RS2',\n): number {\n\tif (blobsSizes.length > nColumns) {\n\t\tthrow new Error('Too many blobs, the number of blobs must be less than the number of columns');\n\t}\n\n\tif (blobsSizes.length === 0) {\n\t\tthrow new Error('No blobs provided');\n\t}\n\n\tlet minVal = Math.max(\n\t\tblobsSizes.reduce((acc, size) => acc + size, 0) / (nColumns * nRows),\n\t\tblobsSizes[0] / (nRows * maxNumColumnsForQuiltIndex),\n\t\tMath.ceil(QUILT_INDEX_PREFIX_SIZE / nRows),\n\t);\n\n\tlet maxVal = Math.ceil((Math.max(...blobsSizes) / (nColumns / blobsSizes.length)) * nRows);\n\n\twhile (minVal < maxVal) {\n\t\tconst mid = (minVal + maxVal) / 2;\n\t\tif (canBlobsFitIntoMatrix(blobsSizes, nColumns, mid * nRows)) {\n\t\t\tmaxVal = mid;\n\t\t} else {\n\t\t\tminVal = mid + 1;\n\t\t}\n\t}\n\n\tconst symbolSize =\n\t\tMath.ceil(minVal / REQUIRED_ALIGNMENT_BY_ENCODING_TYPE[encodingType]) *\n\t\tREQUIRED_ALIGNMENT_BY_ENCODING_TYPE[encodingType];\n\n\tif (!canBlobsFitIntoMatrix(blobsSizes, nColumns, symbolSize * nRows)) {\n\t\tthrow new Error('Quilt oversize');\n\t}\n\n\tif (symbolSize > MAX_SYMBOL_SIZE_BY_ENCODING_TYPE[encodingType]) {\n\t\tthrow new Error(\n\t\t\t`Quilt oversize: the resulting symbol size ${symbolSize} is larger than the maximum symbol size ${MAX_SYMBOL_SIZE_BY_ENCODING_TYPE[encodingType]}; remove some blobs`,\n\t\t);\n\t}\n\n\treturn symbolSize;\n}\n\nfunction canBlobsFitIntoMatrix(\n\tblobsSizes: number[],\n\tnColumns: number,\n\tcolumnSize: number,\n): boolean {\n\treturn blobsSizes.reduce((acc, size) => acc + Math.ceil(size / columnSize), 0) <= nColumns;\n}\n\nexport function parseQuiltPatchId(id: string) {\n\treturn QuiltPatchId.parse(fromUrlSafeBase64(id));\n}\n"],
  "mappings": "AAIA,SAAS,oBAAoB;AAC7B,SAAS,yBAAyB;AAE3B,MAAM,gCAAgC;AACtC,MAAM,6BAA6B;AACnC,MAAM,0BAA0B,6BAA6B;AAC7D,MAAM,+BAA+B,IAAI,IAAI;AAE7C,MAAM,oCAAoC;AAC1C,MAAM,yBAAyB;AAC/B,MAAM,oCAAoC,KAAM,IAAI,qCAAsC;AAC1F,MAAM,kCAAkC;AAExC,MAAM,gBAAgB,KAAK;AAElC,MAAM,sCAAsC;AAAA,EAC3C,KAAK;AAAA,EACL,UAAU;AACX;AAEA,MAAM,mCAAmC;AAAA,EACxC,KAAK,KAAK,KAAK;AAAA,EACf,UAAU,KAAK,KAAK;AACrB;AAqBO,SAAS,kBACf,YACA,UACA,OACA,4BACA,eAA6B,OACpB;AACT,MAAI,WAAW,SAAS,UAAU;AACjC,UAAM,IAAI,MAAM,6EAA6E;AAAA,EAC9F;AAEA,MAAI,WAAW,WAAW,GAAG;AAC5B,UAAM,IAAI,MAAM,mBAAmB;AAAA,EACpC;AAEA,MAAI,SAAS,KAAK;AAAA,IACjB,WAAW,OAAO,CAAC,KAAK,SAAS,MAAM,MAAM,CAAC,KAAK,WAAW;AAAA,IAC9D,WAAW,CAAC,KAAK,QAAQ;AAAA,IACzB,KAAK,KAAK,0BAA0B,KAAK;AAAA,EAC1C;AAEA,MAAI,SAAS,KAAK,KAAM,KAAK,IAAI,GAAG,UAAU,KAAK,WAAW,WAAW,UAAW,KAAK;AAEzF,SAAO,SAAS,QAAQ;AACvB,UAAM,OAAO,SAAS,UAAU;AAChC,QAAI,sBAAsB,YAAY,UAAU,MAAM,KAAK,GAAG;AAC7D,eAAS;AAAA,IACV,OAAO;AACN,eAAS,MAAM;AAAA,IAChB;AAAA,EACD;AAEA,QAAM,aACL,KAAK,KAAK,SAAS,oCAAoC,YAAY,CAAC,IACpE,oCAAoC,YAAY;AAEjD,MAAI,CAAC,sBAAsB,YAAY,UAAU,aAAa,KAAK,GAAG;AACrE,UAAM,IAAI,MAAM,gBAAgB;AAAA,EACjC;AAEA,MAAI,aAAa,iCAAiC,YAAY,GAAG;AAChE,UAAM,IAAI;AAAA,MACT,6CAA6C,UAAU,2CAA2C,iCAAiC,YAAY,CAAC;AAAA,IACjJ;AAAA,EACD;AAEA,SAAO;AACR;AAEA,SAAS,sBACR,YACA,UACA,YACU;AACV,SAAO,WAAW,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,KAAK,OAAO,UAAU,GAAG,CAAC,KAAK;AACnF;AAEO,SAAS,kBAAkB,IAAY;AAC7C,SAAO,aAAa,MAAM,kBAAkB,EAAE,CAAC;AAChD;",
  "names": []
}
